#!/usr/bin/python3
"danwand service"
#
# danwand init server
#
# temerature result from vcgencmd measure_temp
#
# register to cloud service
#
#   220504  PLH     First version

# pylint: disable=logging-not-lazy,logging-fstring-interpolation # c-extension-no-member
# pylint: disable=invalid-name

import os
import sys
from pathlib import Path
import subprocess
import platform
import time
import datetime
import signal
import logging
import json
from urllib.parse import quote, quote_plus
import configparser
import netifaces as ni
import requests

sys.path.insert(0,'/usr/local/danwand/lib')

#from systemd.journal import JournalHandler

API_KEY = "92dfe5e2-e433-4935-9252-e1628f2abd83"
PING_HOST="8.8.8.8"
REBOOT_CONFIG_TIME = 61
REGISTERINTERVAL = 300
APISERVER = "http://api.danbots.com/api/v1/"
COMPUTESERVER = "http://compute.danbots.com/api/"
REGISTERPATH = "register"
CLOSEPATH = "shutdown"
CONFIGFILE = "E:\\danwand.conf" if platform.system().lower()=='windows' else "/etc/danwand.conf"
INTERFACE = 'wlan0'
POWER_IDLE = 1.5  # watt
POWER_WIFI_IDLE = 0.9
POWER_CAMERA_ACTIVE = 1.5
SWVERSION = "0.3.0"
LOOPING = True
HWLIB_ENABLE=False

# if HWLIB_ENABLE:
#     try:
#         from battery import battery as bat
#     except IOError:
#         HWLIB_ENABLE=False
#     if HWLIB_ENABLE:
#         mybat = bat.Battery
#         print (mybat.voltage)

_DEBUG = False

# if _DEBUG:
#     APISERVER = "0.0.0.0:8001/api_1/"

def get_hw_info():
    "Return the raspberry hw string"
    try:
        with open('/proc/device-tree/model', 'r', encoding='UTF-8') as filed:
            hw_info = filed.read()
    except FileNotFoundError:
        hw_info = "no HW info"
    return hw_info

HW_MODEL = quote_plus(get_hw_info())
config = configparser.ConfigParser()

def receive_signal(signal_number, frame):   # pylint: disable=unused-argument
    "signal handling"
    global LOOPING      # pylint: disable=global-statement
    logging.warning(f'Received Signal: {signal_number} {signal.strsignal(signal_number)}')
    LOOPING = False

def save_config():
    "Save configuration to config file"
    logging.debug("saving configfile")
    with open(CONFIGFILE, 'w', encoding="UTF-8") as configfile:
        config.write(configfile)

def get_serial():
    "get wifi eth address as serial"
    try:
        with open('/sys/class/net/wlan0/address', 'r', encoding="UTF-8") as filed:
            wlan = filed.read()
        return wlan.replace(':', '').replace("\n", '')
    except FileNotFoundError:
        return '12345678'

def get_ip():
    "get wlan ip address"
    try:
        ni.ifaddresses('wlan0')
        ipaddr = ni.ifaddresses('wlan0')[ni.AF_INET][0]['addr']
    except (ValueError, KeyError):
        ipaddr = "1.2.3.4"
    return ipaddr

def create_url(apiserv=APISERVER):
    "Create regiser url"
    return apiserv + REGISTERPATH

def get_charge():
    "return charging dict"
    return {"capacity": 90, "voltage": 3.7, "charging":True}

def create_dictionary(myconfig):
    "create dict with information to send"
    rdict = {
        'apikey': API_KEY,
        'deviceid': myconfig['device']['deviceid'],
        'swversion': SWVERSION,
        'localip': get_ip(),
        'registerinterval': int(config['server'].get('registerinterval', REGISTERINTERVAL)),
        'hostname': str(hostname),
        'hw_model': get_hw_info(),
        'power': True,
        'computeserver': config['server'].get('computeserver',COMPUTESERVER),
        **get_hw_measure()
    }
    return rdict

def create_param(ldeviceid, lipaddr, lcharge, lcomputeserver, lregisterinterval, extrainfo=None):   # pylint: disable=too-many-arguments
    "Create url param string"
    #global HW_MODEL, SWVERSION
    param = "apikey=" + API_KEY + "&deviceid=" + ldeviceid + "&hwmodel=" + HW_MODEL + \
            "&swversion=" + SWVERSION + "&localip=" + lipaddr + "&chargestate=" + quote_plus(str(lcharge)) + \
            "&computeserver=" + quote_plus(lcomputeserver) + \
            "&registerinterval=" + str(lregisterinterval) + \
            "&hostname=" + str(hostname)
    param += "&extrainfo=" + quote_plus(str(extrainfo))
    return param

def parse_request(data):
    "parse register response data"
    #update = False
    content = json.loads(data)
    print(content)

def get_cmd_out(cmd):
    "run command and return output"
    job = subprocess.run(cmd, capture_output=True, check=False, shell=True )
    return job.stdout

def get_hw_measure():
    "collect dynamic hw info"
    cmd1 = r"vcgencmd measure_temp | sed -e 's/.*=\(.*\).C.*/\1/'"
    cmd2 = r"vcgencmd measure_volts | sed -e 's/.*=\(.*\)V/\1/'"
    try:
        temp = float(get_cmd_out(cmd1))
        volt = float(get_cmd_out(cmd2))
    except ValueError:
        temp = volt = 0
    measure = {"temp": temp, "cpu_voltage": volt}
    return measure


def post_request(post_url, jsondata):
    "Send json data in post request"
    try:
        resp = requests.post(post_url, json=jsondata)
        #print(resp)
    except requests.ConnectionError as excp:
        log.warning("ConnectionError: " + post_url)
        log.debug(str(excp))
        #connection_error = True
        #TICK = -1
        return False
    except requests.Timeout as excp:
        log.warning("TimeOut: " + str(excp))
        return False
    except requests.exceptions.RequestException as excp:
        log.warning("RequestException: " + str(excp))
        return False
    if not resp:
        log.warning("ResponseCode: " + str(resp.status_code))
        #log.warning("Response: " + resp.text)
        return False
    #log.debug(resp.text)
    return True
    # else:
    #     connection_error = False
    #     if r:
    #         log.info('Register OK')
    #         log.debug(r.text + str(parse_request(r.text)))
    #     else:
    #         log.warning('HTTP error: ' + str(r.status_code))
    #         log.debug('URL: ' + req_url)
    # return True

############  starting #############


hostname = os.uname()[1]
log = logging.getLogger('danwand-service')
#log.addHandler(JournalHandler())
log.addHandler(logging.StreamHandler(sys.stdout))
log.setLevel(logging.INFO)
log.warning(f"DanWand service Starting on {hostname}")
if _DEBUG:
    log.setLevel(logging.DEBUG)
    print(f"Debug {_DEBUG}\n\n")

#signal.signal(signal.SIGHUP, receiveSignal)
signal.signal(signal.SIGTERM, receive_signal)
signal.signal(signal.SIGINT, receive_signal)

serial = get_serial()
if serial:
    print("Serial", serial)
    if not Path(CONFIGFILE).exists():
        log.warning(str(CONFIGFILE) + " does not exist")
        Path(CONFIGFILE).touch(mode=777)
    with open(CONFIGFILE, 'r', encoding="UTF-8") as fd:
        config.read_file(fd)
    if not config.has_section('device'):
        config.add_section('device')
        log.info("Adding device section")
    if serial != config['device'].get('deviceid'):
        log.info("Saving serial "+str(serial) + "on " + str(config['device'].get('deviceid')))
        config['device']['deviceid'] = serial
        save_config()
    if not config.has_section('server'):
        log.info("adding server section")
        config.add_section('server')
        config['server']['apiserver'] = APISERVER
        config['server']['computeserver'] = COMPUTESERVER
        config['server']['registerinterval'] = str(REGISTERINTERVAL)
        save_config()

# check_debug(config)

apiserver = APISERVER
connection_error = False
TICK = 5
lastreg = False
while LOOPING:
    #TICK -= 5
    if TICK > 0:
        time.sleep(5)
        TICK -= 1
        #print("Tick", TICK)
        continue
    with open(CONFIGFILE, 'r', encoding="UTF-8") as fd:
        config.read_file(fd)
    if config['server'].get('debug'):
        print("Debug: True")
        _DEBUG = config['server'].get('debug')
    log.debug('Sections: ' + str(config.sections()))
    if connection_error:
        apiserver = APISERVER
    else:
        apiserver = config['server'].get('apiserver',APISERVER)
    url = create_url(apiserver)
    deviceid = config['device']['deviceid']
    ip_addr = get_ip()
    charge = get_charge()
    hwstate = get_hw_info()
    hw_state = get_hw_measure()
    computeserver = config['server'].get('computeserver',"")
    registerinterval = int(config['server'].get('registerinterval', REGISTERINTERVAL))
    params = create_param(deviceid, ip_addr, quote(json.dumps(charge)), computeserver, registerinterval, extrainfo=hw_state)
    req_url = url + '?' + params
    d = create_dictionary(config)
    log.debug(str(url) + str(d))
    res = post_request(url, d)
    connection_error = True
    TICK = -1
    if res != lastreg:
        log.info("Registration " + str(res))
    lastres = res
    TICK = registerinterval / 5

# closing

log.info(str(datetime.datetime.now()) + " Receive signal - closing")

req_url = apiserver + CLOSEPATH +"?deviceid="+str(serial)
if _DEBUG:
    print(req_url)
try:
    r = requests.get(req_url)
except requests.ConnectionError as ex:
    log.warning("ConnectionError: " + url)
    log.debug(str(ex))
except requests.Timeout as ex:
    log.warning("TimeOut: " + str(ex))
except requests.exceptions.RequestException as ex:
    log.warning("RequestException: " + str(ex))

log.info(str(datetime.datetime.now()) + "Closed")
